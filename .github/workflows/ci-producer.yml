name: CI Producer

on:
  pull_request:
    branches:
      - main

jobs:
  build-producer:
    runs-on: ubuntu-latest

    services:
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd="rabbitmq-diagnostics -q ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Maven dependency cache
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build project
        run: mvn clean install -DskipTests

      - name: Run unit tests
        run: mvn -B test

      - name: Validate Spring Boot startup
        run: |
          set -e

          # Get RabbitMQ container ID
          RABBIT_CONTAINER=$(docker ps --filter "ancestor=rabbitmq:3-management" --format "{{.ID}}")

          echo "Waiting for RabbitMQ to start..."
          for i in {1..30}; do
            if docker exec $RABBIT_CONTAINER rabbitmq-diagnostics -q ping >/dev/null 2>&1; then
              echo "RabbitMQ is ready!"
              break
            fi
            sleep 5
          done

          echo "Starting Spring Boot Producer..."
          mvn spring-boot:run -Dspring-boot.run.main-class=com.ppm.delivery.order.producer.PpmDeliveryOrderProducerApplication > spring-boot.log 2>&1 &
          SPRING_PID=$!

          echo "Waiting for Spring Boot to open port 8080 (max 60s)..."
          for i in {1..60}; do
            if nc -z localhost 8080; then
              echo "Spring Boot is up and running!"
              break
            fi
            sleep 1
          done

          if ! nc -z localhost 8080; then
            echo -e "\e[31mSpring Boot failed to start within 60 seconds\e[0m"
            echo "===== Last 100 lines of Spring Boot logs ====="
            tail -n 100 spring-boot.log
            kill $SPRING_PID || true
            exit 1
          fi

          echo "===== Last 50 lines of Spring Boot logs ====="
          tail -n 50 spring-boot.log

          kill $SPRING_PID || true
        shell: bash


